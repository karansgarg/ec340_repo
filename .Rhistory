library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
set.seed(177125)
naive_predicted <- embed(hsbc_ts, 2)[2]
head(naive_predicted)
naive_predicted <- embed(hsbc_ts, 2)[, 2]
head(naive_predicted)
head(lstm_predicted)
length(lstm_predicted)
length(naive_predicted)
naive_predicted <- embed(hsbc_ts, 2)[(split_num_val+1):(length(hsbc_ts)), 2]
naive_predicted <- embed(hsbc_ts, 2)[(split_num_val+1):(length(hsbc_ts))-1, 2]
length(naive_predicted)
length(lstm_predicted)
?naive
naive_predicted <- embed(y_test)
length(naive_predicted)
length(lstm_predicted)
naive_predicted <- embed(y_test, 2)[, 2]
length(naive_predicted)
length(lstm_predicted)
forecast:: accuracy(naive_predicted, y_test)
forecast:: accuracy(naive_predicted, y_test[-1, ])
forecast:: accuracy(naive_predicted, y_test[-1])
results <- results[-1, ]
results <- cbind(results, naive_predicted)
results
plot(results)
results
lstm_predicted <- predict(best_model, X_test_lstm) %>%
cumsum() %>%
exp()
lstm_predicted <- predict(best_model, X_test_lstm) %>%
cumsum() %>%
exp()
plot(best_model_training)
best_model %>% compile(optimizer="nadam", loss="mean_squared_error")
# Run once for installation
# Quandl API key: rTCfeqfv2pbfQG-uk-af
# install.packages("Quandl")
# install.packages("keras")
# install_keras()
# install.packages("tensorflow")
# install.packages("tsibble")
# install.packages("randomforest")
# install.packages("forecast")
# install.packages("aTSA)
# install.packages("xgboost")
# install.packages("superml")
# install.packages("rfUtilities")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # For loading the generally needed packages, dplyr, ggplot2 etc
library(tsibble) # Extension of the tidyverse to time-series data
library(Quandl) # API for downloading the data
library(keras) # To train the LSTM model
library(randomForest) # To implement random forests
library(forecast) # To assess predictions and compare them to the real test set
library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
set.seed(177125)
best_model %>% compile(optimizer="nadam", loss="mean_squared_error")
summary(best_model)
best_model <- load_model_hdf5('lstm.h5')
summary(best_model)
best_model %>% compile(optimizer="nadam", loss="mean_squared_error")
best_model_training <- best_model %>% fit(x=X_train_lstm,
y=y_train,
batch_size=32,
epochs=100,
validation_data=val_list,
shuffle=FALSE)
plot(best_model_training)
lstm_predicted <- predict(best_model, X_test_lstm) %>%
cumsum() %>%
exp()
lstm_predicted <-lstm_predicted * as.vector(tail(hsbc_ts, 1))
lstm_accuracy <- forecast::accuracy(lstm_predicted, y_test)
print(lstm_accuracy)
?aes
ggplot(data=results, mapping=aes())
ggplot(data=results, mapping=aes(results$index))
ggplot(data=results, mapping=aes(x=index, y=y_test))
best_model_training <- best_model %>% fit(x=X_train_lstm,
y=y_train,
batch_size=64,
epochs=100,
validation_data=val_list,
shuffle=FALSE)
best_model_training <- best_model %>% fit(x=X_train_lstm,
y=y_train,
batch_size=12,
epochs=100,
validation_data=val_list,
shuffle=FALSE)
best_model_training <- best_model %>% fit(x=X_train_lstm,
y=y_train,
batch_size=64,
epochs=100,
validation_data=val_list,
shuffle=FALSE)
lstm_predicted <- predict(best_model, X_test_lstm) %>%
cumsum() %>%
exp()
lstm_predicted <-lstm_predicted * as.vector(tail(hsbc_ts, 1))
lstm_accuracy <- forecast::accuracy(lstm_predicted, y_test)
print(lstm_accuracy)
best_model_training <- best_model %>% fit(x=X_train_lstm,
y=y_train,
batch_size=32,
epochs=100,
validation_data=val_list,
shuffle=FALSE)
lstm_predicted <- predict(best_model, X_test_lstm) %>%
cumsum() %>%
exp()
lstm_predicted <-lstm_predicted * as.vector(tail(hsbc_ts, 1))
lstm_accuracy <- forecast::accuracy(lstm_predicted, y_test)
print(lstm_accuracy)
results$timesteps <- as.numeric(row.names(results))
ggplot(data=results, mapping=aes(x=timesteps, y=y_test))
ggplot(data=results, mapping=aes(x=timesteps, y=actual))
ggplot(data=results) + geom_line(mapping=aes(x=timesteps, y=actual))
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted)) +
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted))
?geom_line
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted, colour=red))
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted, colour="red"))
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted, colour="red")) +
geom_line(mapping=aes(x=timesteps, y=rf_predicted, colour="blue")) +
geom_line(mapping=aes(x=timesteps, y=xgb_predicted, colour="green")) +
geom_line(mapping=aes(x=timesteps, y=lstm_predicted, colour="yellow"))
results <- data.frame(cbind(results, lstm_predicted))
results <- data.frame(cbind(results, lstm_predicted[-1]))
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted, colour="red")) +
geom_line(mapping=aes(x=timesteps, y=rf_predicted, colour="blue")) +
geom_line(mapping=aes(x=timesteps, y=xgb_predicted, colour="green")) +
geom_line(mapping=aes(x=timesteps, y=lstm_predicted, colour="yellow"))
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted, colour="red")) +
geom_line(mapping=aes(x=timesteps, y=rf_predicted, colour="blue")) +
geom_line(mapping=aes(x=timesteps, y=xgb_predicted, colour="green")) +
#  geom_line(mapping=aes(x=timesteps, y=lstm_predicted, colour="yellow"))
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted, colour="red")) +
geom_line(mapping=aes(x=timesteps, y=rf_predicted, colour="blue")) +
geom_line(mapping=aes(x=timesteps, y=xgb_predicted, colour="green"))
results
nrows(results)
length(results)
nrow(results)
linear_predicted <- predict.lm(linear, newdata = data.frame(hsbc_test)) %>%
cumsum() %>%
exp()
linear_predicted <- linear_predicted * as.vector(tail(hsbc_ts, 1))
results <- data.frame(cbind(y_test, linear_predicted))
names(results)[1] <- "actual"
linear_accuracy <- forecast::accuracy(linear_predicted, y_test)
rf_cv_predicted <- predict(rf, X_test) %>%
cumsum() %>%
exp()
rf_cv_predicted <- rf_cv_predicted * as.vector(tail(hsbc_ts, 1))
results <- data.frame(cbind(results, rf_cv_predicted))
head(results)
rf_accuracy <- forecast::accuracy(rf_cv_predicted, y_test)
results <- data.frame(cbind(results, xgb_tuned_predicted))
head(results)
xgb_accuracy <- forecast::accuracy(xgb_tuned_predicted, y_test)
results <- data.frame(cbind(results, lstm_predicted))
naive_predicted <- embed(y_test, 2)[, 2]
results <- results[-1, ]
results <- cbind(results, naive_predicted)
results
results$timesteps <- as.numeric(row.names(results))
nrow(results)
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted, colour="red")) +
geom_line(mapping=aes(x=timesteps, y=rf_cv_predicted, colour="blue")) +
geom_line(mapping=aes(x=timesteps, y=xgb_tuned_predicted, colour="green"))
geom_line(mapping=aes(x=timesteps, y=lstm_predicted, colour="yellow"))
ggplot(data=results) +
geom_line(mapping=aes(x=timesteps, y=actual)) +
geom_line(mapping=aes(x=timesteps, y=linear_predicted, colour="red")) +
geom_line(mapping=aes(x=timesteps, y=rf_cv_predicted, colour="blue")) +
geom_line(mapping=aes(x=timesteps, y=xgb_tuned_predicted, colour="green")) +
geom_line(mapping=aes(x=timesteps, y=lstm_predicted, colour="yellow"))
# Run once for installation
# Quandl API key: rTCfeqfv2pbfQG-uk-af
# install.packages("Quandl")
# install.packages("keras")
# install_keras()
# install.packages("tensorflow")
# install.packages("tsibble")
# install.packages("randomforest")
# install.packages("forecast")
# install.packages("aTSA)
# install.packages("xgboost")
# install.packages("superml")
# install.packages("rfUtilities")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # For loading the generally needed packages, dplyr, ggplot2 etc
library(tsibble) # Extension of the tidyverse to time-series data
library(Quandl) # API for downloading the data
library(keras) # To train the LSTM model
library(randomForest) # To implement random forests
library(forecast) # To assess predictions and compare them to the real test set
library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
set.seed(177125)
Quandl.api_key('rTCfeqfv2pbfQG-uk-af')
hsbc_tib <- Quandl('HKEX/00005', column_index = "1") %>%
as_tsibble(index="Date")
names(hsbc_tib)[2] <- "Price"
dates <- seq(as.Date("2014-02-21"), as.Date("2021-05-07"), by = "day")
hsbc_ts <- as.ts(hsbc_tib, start = c(2014, as.numeric(format(dates[1], "%j"))), frequency=365)
ImputeMissing <- function(ts){
df <- data.frame(ts)
#  Missing <- integer(nrow(df))
#  df = cbind(df, Missing)
for(i in 1:nrow(df)){
if(is.na(df[i, 1])){
df[i, 1] <- df[i-1, 1]
#      df[i, 2] <- 1
}
}
dates_formatted <- data.frame(dates)
df <- cbind(df, dates_formatted)
names(df)[1] <- "Price"
names(df)[2] <- "Date"
tib_new <- as_tsibble(df, index="Date")
#                  start = c(2014, 32),
#                  frequency=365)
return(tib_new)
}
hsbc_tib <- ImputeMissing(hsbc_ts)
hsbc_ts <- as.ts(hsbc_tib, start = c(2014, as.numeric(format(dates[1], "%j"))), frequency=365)
?echo
# Run once for installation
# Quandl API key: rTCfeqfv2pbfQG-uk-af
# install.packages("Quandl")
# install.packages("keras")
# install_keras()
# install.packages("tensorflow")
# install.packages("tsibble")
# install.packages("randomforest")
# install.packages("forecast")
# install.packages("aTSA)
# install.packages("xgboost")
# install.packages("superml")
# install.packages("rfUtilities")
# install.packages("gridExtra")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # For loading the generally needed packages, dplyr, ggplot2 etc
library(tsibble) # Extension of the tidyverse to time-series data
library(Quandl) # API for downloading the data
library(keras) # To train the LSTM model
library(randomForest) # To implement random forests
library(forecast) # To assess predictions and compare them to the real test set
library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
library(gridExtra)
set.seed(177125)
hsbc_visual <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
print(hsbc_visual)
?pacf
price_plot <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
acf_plot <- acf(hsbc_tib) %>%
ggAcf(lag.Max=30,
type="correlation",
plot=FALSE)
price_plot <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
acf_plot <- hsbc_tib %>%
ggAcf(lag.Max=30,
type="correlation",
plot=FALSE)
pacf_plot <- hsbc_tib %>%
ggPacf(lag.Max=30)
price_plot <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
acf_plot <- hsbc_tib %>%
ggAcf(lag.max=30,
type="correlation",
plot=FALSE)
pacf_plot <- hsbc_tib %>%
ggPacf(lag.max=30,
plot=FALSE)
# Run once for installation
# Quandl API key: rTCfeqfv2pbfQG-uk-af
# install.packages("Quandl")
# install.packages("keras")
# install_keras()
# install.packages("tensorflow")
# install.packages("tsibble")
# install.packages("randomforest")
# install.packages("forecast")
# install.packages("aTSA)
# install.packages("xgboost")
# install.packages("superml")
# install.packages("rfUtilities")
# install.packages("gridExtra")
# install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # For loading the generally needed packages, dplyr, ggplot2 etc
library(tsibble) # Extension of the tidyverse to time-series data
library(Quandl) # API for downloading the data
library(keras) # To train the LSTM model
library(randomForest) # To implement random forests
library(forecast) # To assess predictions and compare them to the real test set
library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
library(gridExtra)
library(ggpubr)
# Run once for installation
# Quandl API key: rTCfeqfv2pbfQG-uk-af
# install.packages("Quandl")
# install.packages("keras")
# install_keras()
# install.packages("tensorflow")
# install.packages("tsibble")
# install.packages("randomforest")
# install.packages("forecast")
# install.packages("aTSA)
# install.packages("xgboost")
# install.packages("superml")
# install.packages("rfUtilities")
# install.packages("gridExtra")
# install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # For loading the generally needed packages, dplyr, ggplot2 etc
library(tsibble) # Extension of the tidyverse to time-series data
library(Quandl) # API for downloading the data
library(keras) # To train the LSTM model
library(randomForest) # To implement random forests
library(forecast) # To assess predictions and compare them to the real test set
library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
library(gridExtra)
set.seed(177125)
price_plot <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
price_plot <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
# Run once for installation
# Quandl API key: rTCfeqfv2pbfQG-uk-af
# install.packages("Quandl")
# install.packages("keras")
# install_keras()
# install.packages("tensorflow")
# install.packages("tsibble")
# install.packages("randomforest")
# install.packages("forecast")
# install.packages("aTSA)
# install.packages("xgboost")
# install.packages("superml")
# install.packages("rfUtilities")
# install.packages("gridExtra")
# install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # For loading the generally needed packages, dplyr, ggplot2 etc
library(tsibble) # Extension of the tidyverse to time-series data
library(Quandl) # API for downloading the data
library(keras) # To train the LSTM model
library(randomForest) # To implement random forests
library(forecast) # To assess predictions and compare them to the real test set
library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
library(gridExtra)
set.seed(177125)
price_plot <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
price_plot <- hsbc_tib %>%
ggplot2(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
price_plot <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
# Run once for installation
# Quandl API key: rTCfeqfv2pbfQG-uk-af
# install.packages("Quandl")
# install.packages("keras")
# install_keras()
# install.packages("tensorflow")
# install.packages("tsibble")
# install.packages("randomforest")
# install.packages("forecast")
# install.packages("aTSA)
# install.packages("xgboost")
# install.packages("superml")
# install.packages("rfUtilities")
# install.packages("gridExtra")
# install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # For loading the generally needed packages, dplyr, ggplot2 etc
library(tsibble) # Extension of the tidyverse to time-series data
library(Quandl) # API for downloading the data
library(keras) # To train the LSTM model
library(randomForest) # To implement random forests
library(forecast) # To assess predictions and compare them to the real test set
library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
library(gridExtra)
library(ggplot2)
# Run once for installation
# Quandl API key: rTCfeqfv2pbfQG-uk-af
# install.packages("Quandl")
# install.packages("keras")
# install_keras()
# install.packages("tensorflow")
# install.packages("tsibble")
# install.packages("randomforest")
# install.packages("forecast")
# install.packages("aTSA)
# install.packages("xgboost")
# install.packages("superml")
# install.packages("rfUtilities")
# install.packages("gridExtra")
# install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # For loading the generally needed packages, dplyr, ggplot2 etc
library(tsibble) # Extension of the tidyverse to time-series data
library(Quandl) # API for downloading the data
library(keras) # To train the LSTM model
library(randomForest) # To implement random forests
library(forecast) # To assess predictions and compare them to the real test set
library(aTSA)
library(xgboost)
library(e1071)
library(superml)
library(lmtest)
library(rfUtilities)
library(gridExtra)
set.seed(177125)
price_plot <- hsbc_tib %>%
ggplot(aes(Date, Price)) +
geom_line() +
theme_minimal() +
labs(title = "HSBC Stock Price", x = "Year", y = "Price")
?ggplot
